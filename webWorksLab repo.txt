How the Web Works
In this lab, you’ll be working with a partner to explore a little more about the internet, the web, requests, responses and more. You’ll be reading and writing about concepts as well as practicing some of the commands that we saw during the lecture earlier. 

Topic 1: The Internet and the World Wide Web
What is the internet? (hint: here)
answer: world wide networks connected that use the internert protocol suite. 
What is the world wide web? (hint: here) 
an interconnected system if oublic webpages accessible through the internet. 
Partner One: read this page on how the internet works, Partner Two: read this page on how the world wide web works. When you’re done reading, come back together and and answer the following questions
What are networks? 
computers being connected/linked together 
What are servers? 
computers When clients want to access webpages, a copy of the webpage is downloaded from the server onto the client machine.
What are routers? 
it makes sure that a message sent from a given computer arrives at the right destination computer.
What are packets?
 packet consists of control information and user data; 
Come up with a metaphor for the internet and the web, you can do a single one if you think of one that puts them together or two separate ones (feel free to use one you’ve heard today or read about if you can’t think of a new one, but spend at least 10 minutes trying to think of something different before you resort to that)

The internet is the mall, with the shops being the web accessed by entering the mall.

Draw out a diagram of the infrastructure of the internet and how a request and response travel using your metaphor (like the map and letters we saw during the lecture). Insert the drawing into this document (can be a picture of a physical drawing, a Google Drawing, a Figma drawing, etc)

https://www.figma.com/file/XqrrJ6UtWQrYJKyS7NmOFN/Untitled?node-id=0%3A1

Topic 2: IP Addresses and Domains
What is the difference between an IP address and a domain name? 
The domain name is the title/nickname of the website URL. the ip address is the address of the computer assigned to the device for hosting. 
What’s devmountain.com’s IP address? (Hint: use ‘ping’ in the terminal) 
 104.22.12.35 
Try to access devmountain.com by its IP address. It shouldn’t work because we have our sites protected by a service called CloudFlare. Why might it be important to not let users access your site directly at the IP address? 
they could get access to personal details
How do our browsers know the IP address of a website when we type in its domain name? (If you need a refresher, go read this comic linked in the handout from this lecture)
they use dns which is domain name system to bring the two together. 

example. google.com = 172.217.10.46

		

Topic 3: How a web page loads into a browser 
The steps of how a web page is requested and sent are in the table below. However, they are out of order. Unscramble them and explain your thinking/reasoning in the second two columns of the table. 
Steps Scrambled	Steps in Correct Order	Why did you put this step in this position? 
Example: Here is an example step	Here is an example step	- I put this step first because ____

- I put this step before/after ____ because ____
Request reaches app server	inital request	i put this step because you are typing in the URL and or clicking the Link. 
HTML processing finishes	browser receives HTML begins processing	the browser receives the data for the web page 
App code finishes execution	request reaches app server	i put this after, because the server downloads copy to the computer requesting for it. 
Initial request (link clicked, URL visited)	HTML processing finishes	this step is next because the HTML process is finished and finializing connection. 
Page rendered in browser	app code finishes execution. 	this step is next due to the code finally running and the page being shown. 
Browser receives HTML, begins processing	page rendered in browser	this step is last becvause the page is fully loaded and ready to go. 

Topic 4: Requests and Responses
Setup
Download the folder for this exercise from Frodo. 
Make sure you unzip it. 
Open it in VS Code 
Run `npm i` in the terminal (make sure you’re in the web-works folder you just downloaded). 
You’ll know it was successful if you see a node_modules folder in the web-works folder. 
Run `node server.js` in the terminal (also in the web-works folder) and you should see a log to the terminal saying ‘serving up port 4500’
You’ll be using this file to figure out what will happen when you make requests to this server, so read it over to see what’s going on. We’ll be getting into the two GET functions and the POST function.

Part A: GET / 
You’ll start by looking at the function that runs when we make a get request to /, which looks like this: http://localhost:4500 or http://localhost:4500/ 
You’ll use the curl command to make a request and read the response in your terminal 
Predict what you’ll see as the body of the response:
Journaling in your journies.  
Predict what the content-type of the response will be:
header
Open a terminal window and run `curl -i http:localhost:4500` 
Were you correct about the body? If yes, how/why did you make your prediction? If not, what was it and why?
it was correct, being the the only thing in the box is Text. 
Were you correct about the content-type of the response? If yes, how/why did you make your prediction? If not, what was it and why? yes, being the content type was : text/html, it seems that it would be the only thing to come up. 

Part B: GET /entries
Now look at the next function, the one that runs on get requests to /entries.
You’ll use the curl command again. This time, you’ll need to figure out how to modify it to get the response that you need. 
Predict what you’ll see as the body of the response: journaling your journies
Predict what the content-type of the response will be: application/json
In your terminal, run a curl command to get request this server for /entries 
Were you correct about the body? If yes, how/why did you make your prediction? If not, what was it and why? yes i was correct, being that it doesnt seem to change. 
Were you correct about the content-type of the response? If yes, how/why did you make your prediction? If not, what was it and why?  no, i was not correct originally i thought it would be text/html. 

Part C: POST /entry
Last, read over the function that runs a post request.
At a base level, what is this function doing? (There are four parts to this)
To get this function to work, we need to send a body object with our request. Looking at the function in server.js, what properties do you know you’ll need to include on that body object? And what data types will they be (hint: look at the objects in the entries array)? 
Plan the object that you’ll send with your request. Remember that it needs to be written as a JSON object inside strings. JSON objects properties/keys and values need to be in double quotes and separated by commas. 
What URL will you be making this request to? https://localhost:4500/entry 
Predict what you’ll see as the body of the response:  the content in the array brackets
Predict what the content-type of the response will be: the content type of the response will be the text items i placed in the array bracket by using the curl command
In your terminal, enter the curl command to make this request. It should look something like the example below, with the information you decided on in steps 3 and 4 instead of the ALL CAPS WORDS. 
curl -i -X POST -H ‘Content-type: application/json’ -d JSONOBJECT URL
Were you correct about the body? If yes, how/why did you make your prediction? If not, what was it and why? yes i was correct about the body, after doing the curl command and going on the website it had the stuff i input in from it. 
Were you correct about the content-type of the response? If yes, how/why did you make your prediction? If not, what was it and why? i was right about the content type being we are using it in JSON and writing it instead of HTML. 

Submission
Save this document as a PDF
Go to Github and create a new repository. (Click the little + in the upper right hand corner.)
Name your repository “web-works” (or something like that).
Click “uploading an existing file” under the “Quick setup heading”.
Choose your web works PDF document to upload.
Add “commit message” under the heading “Commit changes”. A good commit message would be something like “Adding web works problems.”
Click commit changes.

Further Study: More curl 
Visit this link and do the exercises using the website provided. Keep track of the commands you used in this document. (Don’t forget to resubmit to GitHub when you complete this section)